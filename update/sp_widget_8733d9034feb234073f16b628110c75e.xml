<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function(glideUserSession) {
  /* widget controller */
	
  var c = this;
	c.player = c.data.current_player;
	c.move_set = false;
	c.move_locked = false;
	c.move_x = 0;
	c.move_y = 0;
	c.move_field_id = 0;
	
	glideUserSession.loadCurrentUser().then(function(currentUser) {
		c.player_name = currentUser.getFullName();
	});
	
	c.startGame = function(){
		c.data.order = 'create_game';
		c.server.get(c.data).then(function(r){
			console.log('STARTED GAME',r.data);
			c.data.game = r.data.game;
			
		});
	}
	
	c.clickOnField = function(field){
		//console.log(field);
		//console.log(c.move_x,c.move_y,c.player);
		if ( field.player != 0 || c.data.game.isOver || c.move_locked ) return;
		
		c.data.move = {};
		c.data.move.x = field.x;
		c.data.move.y = field.y;
		c.data.move.player = c.player;
		c.data.move.field_id = field.id;
		
		var size = c.data.game.board.length;
		  for (var i=0;i<size;i++){
				if (c.data.game.board[i].x == c.data.move.x && c.data.game.board[i].y == c.data.move.y){
					
					if ( !c.move_set ){
						c.move_x = c.data.move.x;	
						c.move_y = c.data.move.y;
						c.move_set = true;
						c.data.game.board[i].player = c.data.move.player;
						if (c.player == 1) $("[data-x="+c.data.move.x+"][data-y="+c.data.move.y+"]").addClass('circle2 locked').removeClass('open');
						if (c.player == 2) $("[data-x="+c.data.move.x+"][data-y="+c.data.move.y+"]").addClass('cross2 locked').removeClass('open');
					
					}
					else if ( c.move_x == c.data.move.x && c.move_y == c.data.move.y){
						c.move_x = 0;	
						c.move_y = 0;
						c.move_set = false;
						c.data.game.board[i].player = 0;
						if (c.player == 1) $("[data-x="+c.data.move.x+"][data-y="+c.data.move.y+"]").addClass('open').removeClass('circle2 locked');
						if (c.player == 2) $("[data-x="+c.data.move.x+"][data-y="+c.data.move.y+"]").addClass('open').removeClass('cross2 locked');
					
					}
					else {
						
						if (c.player == 1) $("[data-x="+c.move_x+"][data-y="+c.move_y+"]").addClass('open').removeClass('circle2 locked');
						if (c.player == 2) $("[data-x="+c.move_x+"][data-y="+c.move_y+"]").addClass('open').removeClass('cross2 locked');
						
						
						
						var size2 = c.data.game.board.length;
						for (var j=0; j<size2; j++){
							if (c.data.game.board[j].x == c.move_x && c.data.game.board[j].y == c.move_y){
								c.data.game.board[j].player = 0;
							}
						}
						
						c.move_x = c.data.move.x;	
						c.move_y = c.data.move.y;
						
						if (c.player == 1) $("[data-x="+c.data.move.x+"][data-y="+c.data.move.y+"]").addClass('circle2 locked').removeClass('open');
						if (c.player == 2) $("[data-x="+c.data.move.x+"][data-y="+c.data.move.y+"]").addClass('cross2 locked').removeClass('open');
						c.data.game.board[i].player = c.data.move.player;
						
					}
				}
			}
	}
	
	c.saveMove = function(){
		console.log(c.move_x,c.move_y,c.player,c.move_set);
		
		c.data.move.x = c.move_x;
		c.data.move.y = c.move_y;
		c.data.move.player = c.player;
		
		if (c.player == 1) $("[data-x="+c.data.move.x+"][data-y="+c.data.move.y+"]").addClass('circle').removeClass('circle2');
		if (c.player == 2) $("[data-x="+c.data.move.x+"][data-y="+c.data.move.y+"]").addClass('cross').removeClass('cross2');
		c.move_locked = true;
		c.move_set = false;
		console.log('BEFORE',c.data);
		c.server.get(c.data).then(function(r){
			console.log('AFTER',r.data);
			c.move_locked = false;
		});
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.field {
		   width : 25px;
		   height : 25px;
		   background-image: url('white.png');
		   float : left;
		}
h1,h3 {
	text-align : center;
}
h3 {
	color : red;
}
		.field.open:hover {
			background-color: grey;
      
		}
		.field.circle {
			background-image: url('circle.png');
		}
		.field.circle2 {
			background-image: url('circle2.jpg');
		}
		.field.cross {
			background-image: url('cross.png');
		}
		.field.cross2 {
			background-image: url('cross2.jpg');
		}
		.neighbour {
			background-color:lightgreen;
		}
		#board {
		   width : 375px;
		   height : 375px;
		   
		   margin : auto;
		float:left;
		text-align: center;
		}
		
		
		#save {
		margin-top : 20px;
	
		}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>board</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>board</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */
	
		var me = gs.getUserID();		
	
		if (!input){
		//gs.addInfoMessage('NO INPUT');
			
			// find active game for me
			
			data.game = {};
			
						
			var g = new GlideRecord('x_145082_cross_game');
			
			g.addQuery('player',me);
			g.addQuery('winner','0');
			g.setLimit(1);			
			g.query();
			
			if (g.next()){
					data.game.exists = true;
					data.game_sys_id = g.sys_id.toString();
					 
					data.game.board = [];
					data.game.number = g.number.toString();
					data.game.isOver = g.winner != 0;
					data.player_name = g.player.name.toString();
					data.current_player = g.current_player.toString();
					var id = 0;
					for(var y = 7; y >= -7; y--){
						for(var x=-7; x<=7; x++){
							var obj = {};
							obj.x = x;
							obj.y = y;

							var  p1 = '"player":"1","x":"'+x+'","y":"' + y +'"';
							var  p2 = '"player":"2","x":"'+x+'","y":"' + y +'"';
							if (g.game.indexOf(p1) > -1) obj.player = 1;
							else if (g.game.indexOf(p2) > -1) obj.player = 2;
							else obj.player = 0;
							id++;
							obj.id = id;
							data.game.board.push(obj);

						}
					}
			}
			else {
				data.game.exists = false;
			}
		}
	else
	{
		if (input.order == 'create_game'){
			data.order = 'created';
			data.game = {};
			var new_game = new GlideRecord('x_145082_cross_game');
			new_game.initialize();
			new_game.player = me;
			new_game.current_player = 1;
			new_game.insert();
			
			var timer = setInterval(function() { clearInterval(timer)  });
			
					data.game.exists = true;
					data.game_sys_id = new_game.sys_id.toString();
					 
					data.game.board = [];
					data.game.number = new_game.number.toString();
					data.game.isOver = new_game.winner != 0;
					data.player_name = new_game.player.name.toString();
					data.current_player = new_game.current_player.toString();
					var id = 0;
					for(var y = 7; y >= -7; y--){
						for(var x=-7; x<=7; x++){
							var obj = {};
							obj.x = x;
							obj.y = y;

							var  p1 = '"player":"1","x":"'+x+'","y":"' + y +'"';
							var  p2 = '"player":"2","x":"'+x+'","y":"' + y +'"';
							var str = new_game.game.toString();
							if (str.indexOf(p1) > -1) obj.player = 1;
							else if (str.indexOf(p2) > -1) obj.player = 2;
							else obj.player = 0;
							id++;
							obj.id = id;
							data.game.board.push(obj);

						}
					}
		} else {
			//gs.addInfoMessage(input.move.x + ' ' + input.move.y + ' ' + input.move.player );
				var m = new GlideRecord('x_145082_cross_move');
				m.initialize();
				m.game = input.game_sys_id;
				m.x = input.move.x;
				m.y = input.move.y;
				m.insert();
				var size = input.game.board.length;
				for (var i=0;i<size;i++){
					if (input.game.board[i].x == input.move.x && input.game.board[i].y == input.move.y){
						input.game.board[i].player = input.move.player;
					}
				}
			// build answer for move
			data.answer = {};
			data.answer.x = 100;
			data.answer.y = 100;
			data.answer.player = 3;
		}
	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-02-15 08:01:20</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>8733d9034feb234073f16b628110c75e</sys_id>
        <sys_mod_count>159</sys_mod_count>
        <sys_name>board</sys_name>
        <sys_package display_value="Cross game" source="x_145082_cross">feaf8d074fa7234073f16b628110c7b6</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Cross game">feaf8d074fa7234073f16b628110c7b6</sys_scope>
        <sys_update_name>sp_widget_8733d9034feb234073f16b628110c75e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-02-26 16:38:52</sys_updated_on>
        <template><![CDATA[<div id = "board">
<!-- your widget template -->
  <div ng-hide="!c.data.game.exists">
    <h1>{{c.data.game.number}}</h1>
    <h3>{{c.data.player_name}} vs System</h3>
  </div>
  <button  ng-hide="c.data.game.exists" ng-click="c.startGame()" type="button" class="btn btn-danger">START NEW GAME</button>
  
  <div id="field_{{field.id}}"
       class = "field" 
       ng-class="{ 'open': {{field.player == '0'}}, 'cross': {{field.player == '2'}}, 'circle': {{field.player == '1'}}}" 
       data-x="{{field.x}}" 
       data-y="{{field.y}}" 
       data-player="{{field.player}}"
       ng-repeat="field in c.data.game.board"
    	 ng-click="c.clickOnField(this.field)" >
  </div>
  
 
  <button id="save"  ng-hide="!c.move_set" ng-click="c.saveMove()" type="button" class="btn btn-danger">SAVE MOVE</button>
  <button id="save"  ng-hide="!c.move_locked" disabled="disabled" type="button" class="btn btn-secondary">WAITING FOR SYSTEM MOVE</button>
</div>]]></template>
    </sp_widget>
</record_update>
